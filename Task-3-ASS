;====================================================================
; Main.asm file generated by New Project wizard
;
; Created:   pÃ¡ 2 28 2014
; Processor: ATmega168
; Compiler:  AVRASM (Proteus)
;====================================================================

;====================================================================
; DEFINITIONS
;====================================================================

;====================================================================
; VARIABLES
;====================================================================

;====================================================================
; RESET and INTERRUPT VECTORS
;====================================================================

      ; Reset Vector
      rjmp  Start

;====================================================================
; CODE SEGMENT
;====================================================================

Start:
; 
; First ASM Programm for the Evaluation Board
;
; Example of LED blinking program for ATmega168
;
; LED cathode connected to PORT D bit 6, anode to +Ucc,
; 3 switches S1, S2, S3 connected to PORT C bit 1, 2, 3 (PC1, PC2, PC3),
; connect JP1 to GND
; 

; microcomputer hardware definition
; it is necessary to say the assembler something about our HW:


;normally we use the complete definition from the definition file:
	.INCLUDE "m168def.inc"

	
pcode: 
.DB 0x81, 0xF3, 0x49, 0x61, 0x33, 0x25
.DB 0x05, 0xF1, 0x01, 0x21
; program memory is word-aligned (16-bits), however, the LPM instruction
; use byte addressing - we need table address in bytes:
.EQU adr_pcode = 2*pcode

	.equ tab_size = 10
EOR R0, R0
OUT DDRC, R0
ldi R16, 254
out DDRB, R16
out DDRD, R0
out PORTD, R0

cbi DDRC, 1
cbi DDRC, 2
cbi DDRC, 3
sbi DDRC, 4
sbi DDRC, 5

out PORTB, R16
cbi PORTC, 4 ;cbi = ON display
sbi PORTC, 5 ;sbi = OFF display
sbi PORTC, 1 ;C1-3 klavesnice
sbi PORTC, 2
sbi PORTC, 3










.DSEG
code: .BYTE tab_size ; reserve space in data memory for our table
.CSEG
ldi ZL, LOW(adr_pcode) ; ZL - lower part of the Z register
ldi ZH, HIGH(adr_pcode) ; ZH - upper part of the Z register
ldi XL, LOW(code) ; XL, XH - LSB and MSB of the X register
ldi XH, HIGH(code) ; LOW extracts LSB of 16-bit value, HIGH extracts MSB
ldi R16, tab_size ; loop counter
copy:
LPM R17, Z+ ; load value from program memory
ST X+, R17 ; store the value in the data memory
DEC R16 ; update loop counter
BRGE copy ; repeat while R16 >= 0

	
.DEF key = R20 ; R20 will be referenced as key variable
.DEF tmp = R2 ; R2 will be referenced as a temporary register
LDI key, 0 ; just initialize key index on some value
ldi R18, tab_size
loop1:
LDI key, 0
loop:
clr R0 ; this register will hold 0 value
ldi YL, LOW(code) ; initialize pointer to the code array
ldi YH, HIGH(code)
add YL, key ; calculate the address of the item in the code array
adc YH, R0 ; add carry to the MSB
ld tmp, Y ; load value from code array
;lsl tmp ; shift value one bit left
out PORTB, tmp ; write it to the PORTB
rcall Delay_06s
inc key
CPSE key,R18
rjmp loop
rjmp loop1



; Delay loop cca 0,6 s for 1 MHz AVR clock:
;
; based on incrementing/decrementing of the register until 0
;
Delay_06s:
	ldi R16, 3	;prepare for 3 loops of 256x256 loops (1 Clk)
Delay:
  	inc R1		;256 incrementing of R1 (1 Clk)
	brne Delay	;Branch if Not Equal - until 0, then go to R2 (1/2 Clk)
	inc R2		;repeat it 256x (1 Clk)
	brne Delay	; (1/2 Clk)
	dec R16		;and that all do 3x (1 Clk)
	brne Delay	; (1/2 Clk)
	ret

;====================================================================
